#!/data/data/com.termux/files/usr/bin/bash

function check_termux() {
	if [[ -z "$PREFIX" && "$PREFIX" != *"/com.termux/"* ]]; then
	echo "${R}[${R}â˜“${R}]${R}${BOLD}Please run it inside termux${W}"
	exit 0
	fi
}

function setup_distro() {
    banner
    echo "${R}[${C}-${R}]${G}${BOLD} Setting up ${C}proot-distro${W}"
    echo

    update_sys
    package_install_and_check "proot-distro"

    banner
    echo "${R}[${C}-${R}]${G}${BOLD} Setting up Selected Linux Distro: ${C}${selected_distro}${W}"
    echo
    print_to_config "selected_distro"

    pd install "$selected_distro"

    distro_path="$PREFIX/var/lib/proot-distro/installed-rootfs/$selected_distro"
}

#########################################################################
#
# Fix Sound Issue
#
#########################################################################

function distro_fix_sound_issue() {
    banner
    echo "${R}[${C}-${R}]${G}${BOLD} Fixing Proot Distro Sound Problem...${W}"
    echo
    echo "export PULSE_SERVER=127.0.0.1" >> "$distro_path/etc/profile"
cat <<EOF > "$HOME/.pd-sound-service"
#!/data/data/com.termux/files/usr/bin/bash

pacmd load-module module-native-protocol-tcp auth-ip-acl=127.0.0.1 auth-anonymous=1
EOF
chmod +x "$HOME/.pd-sound-service"
}

#########################################################################
#
# Update Distro | Install Required Packages | Add User
#
#########################################################################

function pd_package_install_and_check() {
    # Check for --root flag
    local use_sudo=true
    if [[ "$1" == "--root" ]]; then
        use_sudo=false
        shift
    fi
    
    packs_list=($@)

    # Get distro id
    if [ -f /etc/os-release ]; then
        . /etc/os-release
    fi

    # Install package
    for package_name in "${packs_list[@]}"; do
        echo "${R}[${C}-${R}]${G}${BOLD} Installing package: ${C}$package_name ${W}"
        if [[ "$ID" == "debian" ]] || [[ "$ID" == "ubuntu" ]]; then
            if $use_sudo; then
                sudo apt install "$package_name" -y
            else
                apt install "$package_name" -y
            fi
        elif [[ "$ID" == arch* ]]; then
            if $use_sudo; then
                sudo pacman -Sy --noconfirm "$package_name"
            else
                pacman -Sy --noconfirm "$package_name"
            fi
        elif [[ "$ID" == "fedora" ]]; then
            if $use_sudo; then
                sudo dnf install "$package_name" -y
            else
                dnf install "$package_name" -y
            fi
        fi

        # Handle error in installation
        if [ $? -ne 0 ]; then
            print_failed "${BOLD} Error detected during installation of: ${C}$package_name"
            if [[ "$ID" == "debian" ]] || [[ "$ID" == "ubuntu" ]]; then
                if $use_sudo; then
                    sudo apt --fix-broken install -y
                    sudo dpkg --configure -a
                    sudo apt install "$package_name" -y
                else
                    apt --fix-broken install -y
                    dpkg --configure -a
                    apt install "$package_name" -y
                fi
            elif [[ "$ID" == arch* ]]; then
                if $use_sudo; then
                    sudo pacman -Syu --noconfirm
                    sudo pacman -Sy --noconfirm "$package_name"
                else
                    pacman -Syu --noconfirm
                    pacman -Sy --noconfirm "$package_name"
                fi
            elif [[ "$ID" == "fedora" ]]; then
                if $use_sudo; then
                    sudo dnf --refresh install -y
                    sudo rpm --rebuilddb
                    sudo dnf install "$package_name" -y
                else
                    dnf --refresh install -y
                    rpm --rebuilddb
                    dnf install "$package_name" -y
                fi
            fi
        fi

        # Reinstall if necessary
        if [[ "$ID" == "debian" ]] || [[ "$ID" == "ubuntu" ]]; then
            if ! dpkg -s "$package_name" >/dev/null 2>&1; then
                if $use_sudo; then
                    sudo apt install "$package_name" -y
                else
                    apt install "$package_name" -y
                fi
            fi
        elif [[ "$ID" == arch* ]]; then
            if ! pacman -Qi "$package_name" >/dev/null 2>&1; then
                if $use_sudo; then
                    sudo pacman -Sy --noconfirm "$package_name"
                else
                    pacman -Sy --noconfirm "$package_name"
                fi
            fi
        elif [[ "$ID" == "fedora" ]]; then
            if ! rpm -q "$package_name" >/dev/null 2>&1; then
                if $use_sudo; then
                    sudo dnf install "$package_name" -y
                else
                    dnf install "$package_name" -y
                fi
            fi
        fi

        # Check installation
        if [[ "$ID" == "debian" ]] || [[ "$ID" == "ubuntu" ]]; then
            if dpkg -s "$package_name" >/dev/null 2>&1; then
                print_success "$package_name installed successfully"
            else
                if type -p "$package_name" &>/dev/null || ls "$PREFIX/bin/"*"$package_name"* >/dev/null 2>&1; then
                    print_success "$package_name installed successfully"
                fi
            fi
        elif [[ "$ID" == arch* ]]; then
            if pacman -Qi "$package_name" >/dev/null 2>&1; then
                print_success "$package_name installed successfully"
            else
                if type -p "$package_name" &>/dev/null || ls "$PREFIX/bin/"*"$package_name"* >/dev/null 2>&1; then
                    print_success "$package_name installed successfully"
                fi
            fi
        elif [[ "$ID" == "fedora" ]]; then
            if rpm -q "$package_name" >/dev/null 2>&1; then
                print_success "$package_name installed success"
            else
                if type -p "$package_name" &>/dev/null || ls "$PREFIX/bin/"*"$package_name"* >/dev/null 2>&1; then
                    print_success "$package_name installed success"
                fi
            fi
        fi
    done
    echo ""
}

# Create Shell Setup Script
function create_shell_script() {
    local script_path="$1"
    local shell_setup_content="$2"

    # Create directory if it doesn't exist
    mkdir -p "$(dirname "$script_path")"

cat << 'EOF' > "$script_path"
#!/bin/bash

R="$(printf '\033[1;31m')"
G="$(printf '\033[1;32m')"
Y="$(printf '\033[1;33m')"
C="$(printf '\033[1;36m')"
W="$(printf '\033[0m')"
BOLD="$(printf '\033[1m')"

termux_desktop_path="/data/data/com.termux/files/usr/etc/termux-desktop"
config_file="$termux_desktop_path/configuration.conf"
log_file="/data/data/com.termux/files/home/termux-desktop.log"

EOF
    typeset -f banner print_log print_success print_failed check_and_delete get_latest_release pd_package_install_and_check >> "$script_path"
    echo "$shell_setup_content" >> "$script_path"
    
    # Make script executable
    chmod +x "$script_path"
    
    # Verify script was created
    if [[ ! -f "$script_path" ]]; then
        print_failed "Failed to create script at $script_path"
        return 1
    fi
}

function distro_basic_task() {
    banner
    echo "${R}[${C}-${R}]${G}${BOLD} Updating ${C}$selected_distro ${G}And Installing Required Packages${W}"
    echo
    if [[ "$selected_distro" == "debian" ]] || [[ "$selected_distro" == "ubuntu" ]]; then
    proot-distro login "$selected_distro" --shared-tmp -- env DISPLAY=:$display_number apt update
    proot-distro login "$selected_distro" --shared-tmp -- env DISPLAY=:$display_number apt upgrade -y
    elif [[ "$selected_distro" == "archlinux" ]]; then
    proot-distro login "$selected_distro" --shared-tmp -- env DISPLAY=:$display_number pacman -Syu --noconfirm
    elif [[ "$selected_distro" == "fedora" ]]; then
    proot-distro login "$selected_distro" -- /bin/bash -c "echo 'max_parallel_downloads=10/' >> '/etc/dnf/dnf.conf'"
    proot-distro login "$selected_distro" -- /bin/bash -c "echo 'fastestmirror=True/' >> '/etc/dnf/dnf.conf'"
    proot-distro login "$selected_distro" --shared-tmp -- env DISPLAY=:$display_number dnf update -y
    proot-distro login "$selected_distro" --shared-tmp -- env DISPLAY=:$display_number dnf upgrade -y
    fi
    chmod -R +w "$distro_path/"
    # Set proot timezone
    timezone=$(getprop persist.sys.timezone)
    proot-distro login "$selected_distro" --shared-tmp -- env DISPLAY=:$display_number rm /etc/localtime
    proot-distro login "$selected_distro" --shared-tmp -- env DISPLAY=:$display_number cp "/usr/share/zoneinfo/$timezone" /etc/localtime
    if [[ "$pd_audio_config_answer" == "y" ]]; then
    distro_packs="sudo pulseaudio"
    distro_fix_sound_issue
    elif [[ "$pd_audio_config_answer" == "n" ]]; then
    distro_packs="sudo"
    fi
    print_to_config "pd_audio_config_answer"
pd_basic_setup_content=$(cat <<EOF
pd_package_install_and_check --root "${distro_packs}"
check_and_delete "pd_basic_setup.sh"
EOF
)
create_shell_script "$distro_path/root/pd_basic_setup.sh" "$pd_basic_setup_content"
proot-distro login "$selected_distro" -- /bin/bash -c 'bash pd_basic_setup.sh'
    if [[ "$pd_useradd_answer" == "n" ]]; then
    final_user_name="root"
    elif [[ "$pd_useradd_answer" == "y" ]]; then
    final_user_name="${user_name}"
    fi
    print_to_config "pd_useradd_answer"
    print_to_config "final_user_name"
    if [[ "$pd_pass_type" == "2" ]]; then
    final_pass="${pass}"
    else
    final_pass="root"
    fi
    print_to_config "pd_pass_type"
if [[ "$pd_useradd_answer" == "y" ]]; then
cat <<EOF > "$distro_path/root/useradd.sh"
#!/bin/bash

groupadd storage
groupadd wheel
useradd -m -g users -s \$(which bash) ${final_user_name}
usermod -aG wheel,polkitd,audio,video,storage ${final_user_name}
echo "${final_user_name}:${final_pass}" | chpasswd
rm useradd.sh
EOF

proot-distro login "$selected_distro" -- /bin/sh -c 'bash useradd.sh'

if [[ "$pd_pass_type" == "1" ]];then

cat <<EOF > "$distro_path/root/user_permission.sh"
#!/bin/bash

chmod u+rw /etc/sudoers
echo "$final_user_name ALL=(ALL) NOPASSWD:ALL" | tee -a /etc/sudoers > /dev/null 2>&1
chmod u-w /etc/sudoers
rm user_permission.sh
EOF

elif [[ "$pd_pass_type" == "2" ]];then

cat <<EOF > "$distro_path/root/user_permission.sh"
#!/bin/bash

chmod u+rw /etc/sudoers
echo "$final_user_name ALL=(ALL:ALL) ALL" | tee -a /etc/sudoers > /dev/null 2>&1
chmod u-w /etc/sudoers
rm user_permission.sh
EOF

fi

proot-distro login "$selected_distro" -- /bin/sh -c 'bash user_permission.sh'
proot-distro login "$selected_distro" -- /bin/sh -c 'sudo -k'
fi
}

#########################################################################
#
# Setup Zsh And Terminal Utility
#
#########################################################################

function distro_zsh_setup() {
# ZSH Setup
if [[ "$distro_zsh_answer" == "y" ]]; then
    zsh_setup_content=$(cat <<EOF
pd_package_install_and_check "git zsh wget"

if [[ "$selected_distro" == "debian" ]] || [[ "$selected_distro" == "ubuntu" ]]; then
chsh -s /usr/bin/zsh ${final_user_name}
else
chsh -s /bin/zsh ${final_user_name}
fi
check_and_delete "pd_zsh_install.sh"
EOF
)
create_shell_script "$distro_path/root/pd_zsh_install.sh" "$zsh_setup_content"
banner
echo "${R}[${C}-${R}]${G}${BOLD} Setting up shell for ${selected_distro}...${W}"
echo
proot-distro login "$selected_distro" -- /bin/bash -c 'bash pd_zsh_install.sh'
else
echo "${R}[${C}-${R}]${C} Canceling ZSH setup...${W}"
fi
}

function distro_terminal_utility_setup() {
# Terminal Utility Setup
if [[ "$terminal_utility_setup_answer" == "y" ]]; then

if [[ "$selected_distro" == "debian" ]] || [[ "$selected_distro" == "ubuntu" ]]; then
    terminal_utility_content=$(cat <<'EOF'
pd_package_install_and_check "zoxide bat wget gpg fzf"
device_arch=$(uname -m)
case "$device_arch" in
    aarch64) archtype="aarch64" ;;
    arm) archtype="armhf" ;;
    amd64|x86_64) archtype="amd64" ;;
    i*86|x86) archtype="i386" ;;
    *) echo "${R} Unknown architecture${W}" ;;
esac

version=$(get_latest_release "fastfetch-cli" "fastfetch")
wget --tries=5 --retry-connrefused -O fastfetch.deb https://github.com/fastfetch-cli/fastfetch/releases/download/${version}/fastfetch-linux-${archtype}.deb
sudo apt install ./fastfetch.deb -y
check_and_delete "fastfetch.deb"

mkdir -p /etc/apt/keyrings
wget --tries=5 --retry-connrefused -qO- https://raw.githubusercontent.com/eza-community/eza/main/deb.asc | sudo gpg --dearmor -o /etc/apt/keyrings/gierens.gpg
echo "deb [signed-by=/etc/apt/keyrings/gierens.gpg] http://deb.gierens.de stable main" | sudo tee /etc/apt/sources.list.d/gierens.list
chmod 644 /etc/apt/keyrings/gierens.gpg /etc/apt/sources.list.d/gierens.list
apt update
pd_package_install_and_check "eza"
check_and_delete "pd_setup.sh"
EOF
)
else
    terminal_utility_content=$(cat <<'EOF'
pd_package_install_and_check "zoxide bat wget gpg eza fastfetch fzf"
check_and_delete "pd_setup.sh"
EOF
)
fi

create_shell_script "$save_path/pd_setup.sh" "$terminal_utility_content"
banner
echo "${R}[${C}-${R}]${C} Configuring Terminal Utility For $selected_distro ...${W}"
echo
proot-distro login --user "$final_user_name" "$selected_distro" -- /bin/bash -c 'bash pd_setup.sh'

if [[ "$zsh_answer" == "y" ]] && [[ "$distro_zsh_answer" == "n" ]]; then
echo "source $HOME/.shell_rc_content" >> "$HOME/.bashrc"
echo "source $HOME/.aliases" >> "$HOME/.bashrc"
fi
fi
}

#########################################################################
#
# Create App Installer Shortcut
#
#########################################################################

function handel_debian_based_app_installer() {

    cat <<TOP_EOF > "$PREFIX/bin/$selected_distro"
#!/data/data/com.termux/files/usr/bin/bash

source $PREFIX/etc/termux-desktop/common_functions

xhost + > /dev/null 2>&1
if [[ "\$#" -eq 0 ]]; then
    if [[ "\$PWD" == "$HOME" ]]; then
        proot-distro login --user "$final_user_name" "$selected_distro" --shared-tmp --termux-home
    else
        proot-distro login --user "$final_user_name" "$selected_distro" --shared-tmp --work-dir "\$PWD" --termux-home
    fi

elif [[ "\$1" = "install" ]]; then
    if [[ ! -d "/data/data/com.termux/files/usr/share/applications/pd_added" ]]; then
        mkdir -p "/data/data/com.termux/files/usr/share/applications/pd_added"
    fi

    # Separate options and package names
    options=()
    packages=()
    for arg in "\${@:2}"; do
        if [[ "\$arg" == -* ]]; then
            options+=("\$arg")  # Add to options if it starts with '-'
        else
            packages+=("\$arg") # Add to packages otherwise
        fi
    done

# Install the packages using the package manager
proot-distro login --user "$final_user_name" "$selected_distro" --shared-tmp -- env DISPLAY=:$display_number sudo apt install "\${options[@]}" "\${packages[@]}"

    # Generate the packinstall.sh script
cat <<EOF > "$save_root_path/packinstall.sh"
#!/bin/bash

source /data/data/com.termux/files/usr/etc/termux-desktop/common_functions
packages=(\${packages[@]})
EOF

cat <<'EOF' >> "$save_root_path/packinstall.sh"
for package_name in "\${packages[@]}"; do
    desktop_files=\$(dpkg-query -W -f='\${binary:Package}\n' | grep "^\$package_name\(-.*\)\?\$" | xargs dpkg-query -L | grep "^/usr/share/applications/.*\.desktop\$")
    if [ -z "\$desktop_files" ]; then
        print_failed "No .desktop files found for package ${C} \$package_name ${R}in /usr/share/applications."
    else
        for desktop_files_name in \$desktop_files; do
            desktop_files_with_ext=\$(basename "\$desktop_files_name")
            desktop_files_without_ext="\${desktop_files_with_ext%.desktop}"
            print_success "Adding ${C}\${desktop_files_without_ext} ${G}To Termux Menu"
            cp "/usr/share/applications/\${desktop_files_with_ext}" "/data/data/com.termux/files/usr/share/applications/pd_added/"
            sed -i 's/Exec=/Exec=pdrun /g' "/data/data/com.termux/files/usr/share/applications/pd_added/\${desktop_files_with_ext}"
        done
    fi
done
check_and_delete 'packinstall.sh'
EOF

# Execute the script inside the proot-distro container
proot-distro login "$selected_distro" --shared-tmp -- /bin/bash -c 'export DISPLAY=:$display_number; export XDG_RUNTIME_DIR=$TMPDIR; bash packinstall.sh'

elif [[ "\$1" = "remove" ]] || [[ "\$1" = "autoremove" ]]; then

    # Separate options and package names
    options=()
    packages=()
    for arg in "\${@:2}"; do
        if [[ "\$arg" == -* ]]; then
            options+=("\$arg")  # Add to options if it starts with '-'
        else
            packages+=("\$arg") # Add to packages otherwise
        fi
    done

cat <<EOF > "$save_root_path/packremove.sh"
#!/bin/bash

source /data/data/com.termux/files/usr/etc/termux-desktop/common_functions
packages=(\${packages[@]})
EOF

cat <<'EOF' >> "$save_root_path/packremove.sh"
for package_name in "\${packages[@]}"; do
    desktop_files=\$(dpkg-query -W -f='\${binary:Package}\n' | grep "^\$package_name\(-.*\)\?\$" | xargs dpkg-query -L | grep "^/usr/share/applications/.*\.desktop\$")
    if [ -z "\$desktop_files" ]; then
        print_failed "No .desktop files found for package ${C} \$package_name ${R}in /usr/share/applications."
    else
        for desktop_files_name in \$desktop_files; do
            desktop_files_with_ext=\$(basename "\$desktop_files_name")
            desktop_files_without_ext="\${desktop_files_with_ext%.desktop}"
            print_success "Removing ${C}\${desktop_files_without_ext} ${G}From Termux Menu"
            rm /data/data/com.termux/files/usr/share/applications/pd_added/\${desktop_files_with_ext}
        done
    fi
done
check_and_delete 'packremove.sh'
EOF
proot-distro login "$selected_distro" --shared-tmp -- /bin/bash -c 'export DISPLAY=:$display_number; export XDG_RUNTIME_DIR=$TMPDIR; bash packremove.sh'

# Remove the packages using the package manager
proot-distro login --user "$final_user_name" "$selected_distro" --shared-tmp -- env DISPLAY=:$display_number sudo apt \$1 "\${options[@]}" "\${packages[@]}"

elif [[ "\$1" = "update" ]]; then
    proot-distro login --user $final_user_name "$selected_distro" --shared-tmp --termux-home -- env DISPLAY=:$display_number sudo apt update
fi

if [[ \$1 = "install" ]] || [[ \$1 = "remove" ]] || [[ \$1 = "autoremove" ]]; then
    gtk-update-icon-cache
    update-desktop-database -q "$PREFIX/share/applications/pd_added"
fi

TOP_EOF
}

function handel_arch_based_app_installer() {
    cat <<TOP_EOF > "$PREFIX/bin/$selected_distro"
#!/data/data/com.termux/files/usr/bin/bash

source $PREFIX/etc/termux-desktop/common_functions

xhost + > /dev/null 2>&1
if [[ "\$#" -eq 0 ]]; then
    if [[ "\$PWD" == "$HOME" ]]; then
        proot-distro login --user "$final_user_name" "$selected_distro" --shared-tmp --termux-home
    else
        proot-distro login --user "$final_user_name" "$selected_distro" --shared-tmp --work-dir "\$PWD" --termux-home
    fi

elif [[ "\$1" = "install" ]]; then
    if [[ ! -d "/data/data/com.termux/files/usr/share/applications/pd_added" ]]; then
        mkdir -p "/data/data/com.termux/files/usr/share/applications/pd_added"
    fi

    # Separate options and package names
    options=()
    packages=()
    for arg in "\${@:2}"; do
        if [[ "\$arg" == -* ]]; then
            options+=("\$arg")  # Add to options if it starts with '-'
        else
            packages+=("\$arg") # Add to packages otherwise
        fi
    done

# Install the packages using the package manager
proot-distro login $selected_distro --shared-tmp -- env DISPLAY=:$display_number sudo pacman -S"\${options[@]}" --noconfirm  "\${packages[@]}"
    
cat <<EOF > "$save_root_path/packinstall.sh"
#!/bin/bash

source /data/data/com.termux/files/usr/etc/termux-desktop/common_functions
packages=(\${packages[@]})
EOF

cat <<'EOF' >> "$save_root_path/packinstall.sh"
for package_name in "\${packages[@]}"; do
    desktop_files=\$(pacman -Ql \$package_name | grep -oP "/usr/share/applications/.*\.desktop$")
    if [ -z "\$desktop_files" ]; then
        print_failed "No .desktop files found for package ${C} \$package_name ${R}in /usr/share/applications."
    else
        for desktop_files_name in \$desktop_files; do
            desktop_files_with_ext=\$(basename "\$desktop_files_name")
            desktop_files_without_ext="\${desktop_files_with_ext%.desktop}"
            print_success "Adding ${C}\${desktop_files_without_ext} ${G}To Termux Menu"
            cp "/usr/share/applications/\${desktop_files_with_ext}" "/data/data/com.termux/files/usr/share/applications/pd_added/"
            sed -i 's/Exec=/Exec=pdrun /g' "/data/data/com.termux/files/usr/share/applications/pd_added/\${desktop_files_with_ext}"
        done
    fi
done
check_and_delete 'packinstall.sh'
EOF

proot-distro login $selected_distro --shared-tmp -- /bin/bash -c 'export DISPLAY=:$display_number; export XDG_RUNTIME_DIR=$TMPDIR; bash packinstall.sh'

elif [[ "\$1" = "remove" ]]; then

    # Separate options and package names
    options=()
    packages=()
    for arg in "\${@:2}"; do
        if [[ "\$arg" == -* ]]; then
            options+=("\$arg")  # Add to options if it starts with '-'
        else
            packages+=("\$arg") # Add to packages otherwise
        fi
    done
    
cat <<EOF > "$save_root_path/packremove.sh"
#!/bin/bash

source /data/data/com.termux/files/usr/etc/termux-desktop/common_functions
packages=(\${packages[@]})
EOF

cat <<'EOF' >> "$save_root_path/packremove.sh"
for package_name in "\${packages[@]}"; do
    desktop_files=\$(pacman -Ql \$package_name | grep -oP "/usr/share/applications/.*\.desktop$")
    if [ -z "\$desktop_files" ]; then
        print_failed "No .desktop files found for package ${C} \$package_name ${R}in /usr/share/applications."
    else
        for desktop_files_name in \$desktop_files; do
            desktop_files_with_ext=\$(basename "\$desktop_files_name")
            desktop_files_without_ext="\${desktop_files_with_ext%.desktop}"
            print_success "Removing ${C}\${desktop_files_without_ext} ${G}From Termux Menu"
            rm /data/data/com.termux/files/usr/share/applications/pd_added/\${desktop_files_with_ext}
        done
    fi
done
check_and_delete 'packremove.sh'
EOF

proot-distro login $selected_distro --shared-tmp -- /bin/bash -c 'export DISPLAY=:$display_number; export XDG_RUNTIME_DIR=$TMPDIR; bash packremove.sh'

# Remove the packages using the package manager
proot-distro login $selected_distro --shared-tmp -- env DISPLAY=:$display_number sudo pacman -R"\${options[@]}" --noconfirm "\${packages[@]}"

elif [[ "\$1" = "update" ]]; then
    proot-distro login --user $final_user_name "$selected_distro" --shared-tmp --termux-home -- env DISPLAY=:$display_number sudo pacman -Su
fi

if [[ \$1 = "install" ]] || [[ \$1 = "remove" ]]; then
    gtk-update-icon-cache
    update-desktop-database -q "$PREFIX/share/applications/pd_added"
fi

TOP_EOF
}

function handel_fedora_based_app_installer() {
    cat <<TOP_EOF > "$PREFIX/bin/$selected_distro"
#!/data/data/com.termux/files/usr/bin/bash

source $PREFIX/etc/termux-desktop/common_functions

xhost + > /dev/null 2>&1
if [[ "\$#" -eq 0 ]]; then
    if [[ "\$PWD" == "$HOME" ]]; then
        proot-distro login --user "$final_user_name" "$selected_distro" --shared-tmp --termux-home
    else
        proot-distro login --user "$final_user_name" "$selected_distro" --shared-tmp --work-dir "\$PWD" --termux-home
    fi

elif [[ "\$1" = "install" ]]; then
    if [[ ! -d "/data/data/com.termux/files/usr/share/applications/pd_added" ]]; then
        mkdir -p "/data/data/com.termux/files/usr/share/applications/pd_added"
    fi

    # Separate options and package names
    options=()
    packages=()
    for arg in "\${@:2}"; do
        if [[ "\$arg" == -* ]]; then
            options+=("\$arg")  # Add to options if it starts with '-'
        else
            packages+=("\$arg") # Add to packages otherwise
        fi
    done

# Install the packages using the package manager
proot-distro login $selected_distro --shared-tmp -- env DISPLAY=:$display_number sudo dnf install "\${options[@]}" "\${packages[@]}"

cat <<EOF > "$save_root_path/packinstall.sh"
#!/bin/bash

source /data/data/com.termux/files/usr/etc/termux-desktop/common_functions
packages=(\${packages[@]})
EOF

cat <<'EOF' >> "$save_root_path/packinstall.sh"
for package_name in "\${packages[@]}"; do
    package_query=\$(rpm -q "\$package_name" | sed 's/-[0-9].*//')
    desktop_files=\$(ls /usr/share/applications/ | grep "\$package_query.*\.desktop\$")
    if [ -z "\$desktop_files" ]; then
        print_failed "No .desktop files found for package ${C} \$package_name ${R}in /usr/share/applications."
    else
        for desktop_files_name in \$desktop_files; do
            desktop_files_with_ext=\$(basename "\$desktop_files_name")
            desktop_files_without_ext="\${desktop_files_with_ext%.desktop}"
            print_success "Adding ${C}\${desktop_files_without_ext} ${G}To Termux Menu"
            cp "/usr/share/applications/\${desktop_files_with_ext}" "/data/data/com.termux/files/usr/share/applications/pd_added/"
            sed -i 's/Exec=/Exec=pdrun /g' "/data/data/com.termux/files/usr/share/applications/pd_added/\${desktop_files_with_ext}"
        done
    fi
done
rm packinstall.sh
EOF

# Execute the script inside the proot-distro container
proot-distro login $selected_distro --shared-tmp -- /bin/bash -c 'export DISPLAY=:$display_number; export XDG_RUNTIME_DIR=$TMPDIR; bash packinstall.sh'

elif [[ "\$1" = "remove" ]]; then

# Separate options and package names
    options=()
    packages=()
    for arg in "\${@:2}"; do
        if [[ "\$arg" == -* ]]; then
            options+=("\$arg")  # Add to options if it starts with '-'
        else
            packages+=("\$arg") # Add to packages otherwise
        fi
    done

cat <<EOF > "$save_root_path/packremove.sh"
#!/bin/bash

source /data/data/com.termux/files/usr/etc/termux-desktop/common_functions
packages=(\${packages[@]})
EOF

cat <<'EOF' >> "$save_root_path/packremove.sh"
for package_name in "\${packages[@]}"; do
    package_query=\$(rpm -q "\$package_name" | sed 's/-[0-9].*//')
    desktop_files=\$(ls /usr/share/applications/ | grep "\$package_query.*\.desktop\$")
    if [ -z "\$desktop_files" ]; then
        print_failed "No .desktop files found for package ${C} \$package_name ${R}in /usr/share/applications."
    else
        for desktop_files_name in \$desktop_files; do
            desktop_files_with_ext=\$(basename "\$desktop_files_name")
            desktop_files_without_ext="\${desktop_files_with_ext%.desktop}"
            print_success "Removing ${C}\${desktop_files_without_ext} ${G}From Termux Menu"
            rm /data/data/com.termux/files/usr/share/applications/pd_added/\${desktop_files_with_ext}
        done
    fi
done
check_and_delete 'packremove.sh'
EOF

proot-distro login $selected_distro --shared-tmp -- /bin/bash -c 'export DISPLAY=:$display_number; export XDG_RUNTIME_DIR=$TMPDIR; bash packremove.sh'

# Remove the packages using the package manager
proot-distro login $selected_distro --shared-tmp -- env DISPLAY=:$display_number sudo dnf remove "\${options[@]}" "\${packages[@]}"

elif [[ "\$1" = "update" ]]; then
    proot-distro login --user $final_user_name "$selected_distro" --shared-tmp --termux-home -- env DISPLAY=:$display_number sudo dnf update
fi

if [[ \$1 = "install" ]] || [[ \$1 = "remove" ]] || [[ \$1 = "autoremove" ]]; then
    gtk-update-icon-cache
    update-desktop-database -q "$PREFIX/share/applications/pd_added"
fi

TOP_EOF
}

function distro_create_app_installer() {
    banner
    echo "${R}[${C}-${R}]${G}${BOLD} Creating App Launcher${W}"

save_root_path="$distro_path/root"

if [[ "$selected_distro" == "debian" ]] || [[ "$selected_distro" == "ubuntu" ]]; then
handel_debian_based_app_installer
elif [[ "$selected_distro" == "archlinux" ]]; then
handel_arch_based_app_installer
elif [[ "$selected_distro" == "fedora" ]]; then
handel_fedora_based_app_installer
fi

cat <<EOF >> "$PREFIX/bin/$selected_distro"
function remove_distro_container() {
    confirmation_y_or_n "Do you want to remove the distro${R}it can't be undone" ans_remove_distro
    case \$ans_remove_distro in
        [yY]* )
            print_success "Continuing with answer: \$ans_remove_distro"
            sleep 0.2
            if [[ -d $distro_path ]]; then
                proot-distro remove "$selected_distro"
                distro_file_list=(
                    "$PREFIX/bin/pdrun"
                    "$PREFIX/share/applications/pd_added"
                    "$PREFIX/bin/add2menu"
                    "$PREFIX/share/applications/add2menu.desktop"
                    "$PREFIX/bin/"$selected_distro""
                )
                for distro_file in "\${distro_file_list[@]}"; do
                    if [[ -e "\$distro_file" ]]; then
                        check_and_delete "\$distro_file"
                    else
                        print_failed "File does not exist: \$distro_file"
                    fi
                done
                print_success "$selected_distro removed successfully"
                print_to_config "distro_add_answer" "n"
            else
                print_failed "$selected_distro does not exist"
            fi
            ;;
        [nN]* )
            echo "${R}[${C}-${R}]${C} Skipping distro remove${W}"
            sleep 0.2
            ;;
        * )
            print_failed "Invalid input, Please enter y or n"
            ;;
    esac
}

function help_distro_container() {
echo -e "
"$selected_distro" install packagename     to install packages and add them to termux desktop\n
"$selected_distro" remove packagename      to remove packages and also remove them to termux desktop\n
"$selected_distro" update                  to update the Linux distro\n
"$selected_distro" -r                      to login as root\n
"$selected_distro" --remove                to complitely remove the Linux distro and delete all files and data related to it\n
"
}
case \$1 in
--root|-r)
proot-distro login --termux-home "$selected_distro"
;;
--remove)
remove_distro_container
;;
--help|-h)
help_distro_container
;;
esac
EOF

chmod +x "$PREFIX/bin/$selected_distro"

#########################################################################
########################### Add To Menu Setup ###########################
#########################################################################
banner
package_install_and_check "zenity"

check_and_create_directory "$PREFIX/share/applications/pd_added"

check_and_create_directory "$PREFIX/share/applications/"
check_and_delete "$PREFIX/share/applications/add2menu.desktop"
check_and_delete "$HOME/Desktop/add2menu.desktop"
check_and_create_directory "$PREFIX/opt/add2menu"
download_file "$PREFIX/opt/add2menu/add2menu.py" "https://raw.githubusercontent.com/sabamdarif/termux-desktop/refs/heads/main/add2menu/add2menu.py"
download_file "$PREFIX/opt/add2menu/add2menu_legacy" "https://raw.githubusercontent.com/sabamdarif/termux-desktop/refs/heads/main/add2menu/add2menu_legacy"
download_file "$PREFIX/share/applications/org.sabamdarif.termux.add2menu.desktop" "https://raw.githubusercontent.com/sabamdarif/termux-desktop/refs/heads/main/add2menu/org.sabamdarif.termux.add2menu.desktop"
cp $PREFIX/share/applications/org.sabamdarif.termux.add2menu.desktop $HOME/Desktop/
chmod +x $HOME/Desktop/org.sabamdarif.termux.add2menu.desktop
chmod +x "$PREFIX/opt/add2menu/add2menu_legacy"

cat <<EOF >> "$PREFIX/bin/add2menu"
#!/data/data/com.termux/files/usr/bin/bash

export distro_name="${selected_distro}"
case \$1 in
    --legacy)
    ./data/data/com.termux/files/usr/opt/add2menu/add2menu_legacy
    ;;
    --legacy-nogpu)
    ./data/data/com.termux/files/usr/opt/add2menu/add2menu_legacy --nogpu
    ;;
    --help|-h)
echo -e "
--legacy            To launch the old add2menu (uses zenity)
--legacy-nogpu      To launch the old add2menu without gpu acceleration (uses zenity)
--help,-h           To show help
"
    ;;
    *)
    python /data/data/com.termux/files/usr/opt/add2menu/add2menu.py
    ;;
esac

EOF

chmod +x "$PREFIX/bin/add2menu"
}

#########################################################################
#
# App Launcher Setup
#
#########################################################################

function distro_app_launch_setup() {
if [[ "$enable_hw_acc" == "y" ]]; then

    if [[ "$pd_audio_config_answer" == "n" ]];then
cat <<EOF > "$PREFIX/bin/pdrun"
#!/data/data/com.termux/files/usr/bin/bash

selected_pd_hw_method="$pd_hw_method"
EOF
    else
cat <<EOF > "$PREFIX/bin/pdrun"
#!/data/data/com.termux/files/usr/bin/bash

selected_pd_hw_method="$pd_hw_method"
bash $HOME/.pd-sound-service
EOF
    fi

cat <<EOF >> "$PREFIX/bin/pdrun"
xhost + > /dev/null 2>&1
case \$1 in
--nogpu)
proot-distro login --user $final_user_name "$selected_distro" --shared-tmp --termux-home -- eval "env DISPLAY=:$display_number XDG_RUNTIME_DIR=\${TMPDIR} LIBGL_ALWAYS_SOFTWARE=1 MESA_LOADER_DRIVER_OVERRIDE=llvmpipe GALLIUM_DRIVER=llvmpipe \${@:2}"
;;
--help|-h)
echo "${G}Type ${C}pdrun launch command ${G}to start with GPU acceleration${W}"
;;
*)
proot-distro login --user $final_user_name "$selected_distro" --shared-tmp --termux-home -- eval "env DISPLAY=:$display_number XDG_RUNTIME_DIR=\${TMPDIR} \$selected_pd_hw_method \$@"
;;
esac
EOF

elif [[ "$enable_hw_acc" == "n" ]]; then

if [[ "$pd_audio_config_answer" == "n" ]];then
cat <<EOF > "$PREFIX/bin/pdrun"
#!/data/data/com.termux/files/usr/bin/bash

EOF
    else
cat <<EOF > "$PREFIX/bin/pdrun"
#!/data/data/com.termux/files/usr/bin/bash

bash $HOME/.pd-sound-service
EOF
    fi

cat <<EOF >> "$PREFIX/bin/pdrun"
xhost + > /dev/null 2>&1
case \$1 in
--help|-h)
echo "${G}Type ${C}pdrun launch command ${G}to start with gpu acceleration${W}"
;;
*)
proot-distro login --user $final_user_name "$selected_distro" --shared-tmp --termux-home -- eval "env DISPLAY=:$display_number XDG_RUNTIME_DIR=\${TMPDIR} \$@"
;;
esac
EOF
fi
chmod +x "$PREFIX/bin/pdrun"
}

#########################################################################
#
# Install some required packages
#
#########################################################################

function install_some_required_pack() {
    local some_required_pack_list=""
    
    if [[ "$selected_distro" == "ubuntu" ]] || [[ "$selected_distro" == "debian" ]]; then
        some_required_pack_list="zlib1g zlib1g-dev fuse xdg-utils libglib2.0-0 libglib2.0-bin dbus"
    elif [[ "$selected_distro" == "fedora" ]]; then
        some_required_pack_list="zlib-devel fuse xdg-utils glib2 dbus"
    elif [[ "$selected_distro" == "archlinux" ]]; then
        some_required_pack_list="zlib fuse2 xdg-utils glib2 dbus"
    fi

    if [[ -z "$some_required_pack_list" ]]; then
        print_failed "No packages defined for $selected_distro"
    fi

    banner
    echo "${R}[${C}-${R}]${G} Installing some required packages${W}"
    pd_setup_some_required_pack=$(cat <<EOF
pd_package_install_and_check "$some_required_pack_list"
check_and_delete "some_required_pack.sh"
EOF
)
    create_shell_script "$save_path/some_required_pack.sh" "$pd_setup_some_required_pack"
    proot-distro login "$selected_distro" -- /bin/bash -c 'bash some_required_pack.sh'
}

function install_distro_container() {
    setup_distro
    distro_basic_task
    if [[ "$call_from_change_pd" != "y" ]]; then
        if [[ "$enable_hw_acc" == "y" ]]; then
            hw_config
        fi
    fi
    save_path="$distro_path/root"
    distro_zsh_setup
    distro_terminal_utility_setup
    distro_create_app_installer
    install_some_required_pack
    distro_app_launch_setup
    distro_folders_link
}

#########################################################################
#
# Check Installation
#
#########################################################################
function disro_container_install_check() {
    if [[ -d "$PREFIX/bin/$selected_distro" ]] || [[ -d "$PREFIX/var/lib/proot-distro/installed-rootfs/$selected_distro" ]]; then
    echo
    print_success "${BOLD} $selected_distro container setup successfully"
    else
    max_retries=2
    retry_count=0
        while [[ "$retry_count" -lt "$max_retries" ]]; do
        print_failed "Some problem occurred in $selected_distro setup"
        echo
        echo "${R}[${C}-${R}]${G} Trying again... (Attempt $((retry_count + 1)) of $max_retries)${W}"
        install_distro_container
            if [[ -d "$PREFIX/bin/$selected_distro" ]] || [[ -d "$PREFIX/var/lib/proot-distro/installed-rootfs/$selected_distro" ]]; then
            echo
            print_success "${BOLD} $selected_distro container setup successfully"
            break
            fi
            ((retry_count++))
            if [[ "$retry_count" == "$max_retries" ]]; then
            print_failed "Failed to set up $selected_distro container after multiple attempts. Skipping...${W}"
            break
            fi
        done
    fi
}

check_termux
install_distro_container
disro_container_install_check