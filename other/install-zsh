#!/data/data/com.termux/files/usr/bin/bash

zsh_setup() {
	echo "${R}[${C}-${R}]${G} Setup zsh zinit..."${W}
	sleep 1.3
	cd ~
cat << 'EOF' >> "$HOME/.zshrc"
setopt nonomatch
### Added by Zinit's installer
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi

source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust

### End of Zinit's installer chunk
zinit lucid light-mode for \
    OMZL::history.zsh \
    OMZL::completion.zsh \
    OMZL::key-bindings.zsh

zinit wait lucid light-mode for \
  atinit"ZINIT[COMPINIT_OPTS]=-C; zpcompinit; zpcdreplay" \
      zdharma-continuum/fast-syntax-highlighting \
      OMZP::colored-man-pages \
      OMZP::git \
  atload"!_zsh_autosuggest_start" \
      zsh-users/zsh-autosuggestions \
  blockf atpull'zinit creinstall -q .' \
      zsh-users/zsh-completions

source "$HOME/.zsh-themes/td.zsh-theme"
EOF
bash -c "$(curl --fail --show-error --silent --location https://raw.githubusercontent.com/zdharma-continuum/zinit/HEAD/scripts/install.sh)"
chsh -s zsh
}

setup_theme() {
cat << EOF > .zsh-themes/td.zsh-theme
autoload -Uz colors && colors
autoload -Uz vcs_info

setopt PROMPT_SUBST

# Enable Git branch display
zstyle ':vcs_info:git:*' formats ' %F{magenta} %b%f'
precmd() { vcs_info }

# Exit status indicator
exit_status="%(?..%F{red}✘ %?%f)"

# Detect distro and set the correct icons
distro_id=\$(grep '^ID=' /etc/os-release | cut -d= -f2 | tr -d '"' ) >/dev/null 2>&1
case "\$distro_id" in
    kali) DISTRO_ICON="" ;;   # Kali Linux
    arch) DISTRO_ICON="" ;;   # Arch Linux
    ubuntu) DISTRO_ICON="" ;; # Ubuntu
    debian) DISTRO_ICON="" ;; # Debian
    fedora) DISTRO_ICON="" ;; # Fedora
    alpine) DISTRO_ICON="" ;; # Alpine
    void) DISTRO_ICON="" ;;   # Void Linux
    opensuse*|sles) DISTRO_ICON="" ;; # openSUSE
    gentoo) DISTRO_ICON="" ;; # Gentoo
    nixos) DISTRO_ICON="" ;; # NixOS
    *) DISTRO_ICON="" ;;      # Default Linux Icon
esac

# Symbols
FOLDER_ICON=""
PROMPT_SYMBOL="%F{green}❯%F{reset}"

# Check if running in Termux and set username accordingly
if [[ -n "\$PREFIX" && "\$PREFIX" == */com.termux/* ]]; then
    user_name="${final_user_name}"  # You can replace this with another method to get the preferred username
else
    user_name="\$(whoami)"
fi

# User and host info inside a box with DISTRO_ICON in the middle
user_host="%F{blue}[%F{cyan}\$user_name%F{yellow} \$DISTRO_ICON %F{cyan}%m%F{blue}]%f"

# Current directory inside the same box
dir_display="%F{blue}[%F{yellow}\$FOLDER_ICON %F{yellow}%~%F{blue}]%f"

# Prompt layout (P10K-like)
PROMPT="
%B%F{green}╭─ \$user_host $\dir_display\${vcs_info_msg_0_}
%B%F{green}╰─\${PROMPT_SYMBOL} %F{reset}"
RPROMPT="\$exit_status"
EOF

print_success "zsh setup successfully"
}

check_paramitter() {
    if [[ -n "$PREFIX" && "$PREFIX" == *"/com.termux/"* && -z "$user_name" ]]; then
      while true; do
        echo " "
        while true; do
        	    read -r -p "${R}[${C}-${R}]${G} Input username [Lowercase]: ${W}" user_name
        	    if [[ -n "$user_name" ]]; then
        	        break
        	    else
        	        print_warn "You can't leave the username empty. Please enter a valid username."
        	    fi
        	done
        echo
        local choice
        read -r -p "${R}[${C}-${R}]${Y} Do you want to continue with username ${C}$user_name ${Y}? (y/n) : ${W}" choice
        echo
        choice="${choice:-y}"
        echo
        print_success "Continuing with answer: $choice"
        sleep 0.2
        	case $choice in
        	    [yY]* )
        	        print_success "Continuing with username ${C}$user_name"
        	        break;;
        	    [nN]* )
        	        echo "${R}[${C}-${R}]${G}Please provide username again.${W}"
        	        echo
        	        ;;
        	    * )
        	        print_failed "Invalid input, Please enter y or n"
        	        ;;
        	esac
    	done
    fi
    final_user_name="${user_name}"
}

check_paramitter
zsh_setup
setup_theme